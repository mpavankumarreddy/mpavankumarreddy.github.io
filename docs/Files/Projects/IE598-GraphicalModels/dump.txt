
'''
# construct a new graph by pruning away some of the unreliable workers from the old graph
w_hats = estimate_pj(G, tasks, workers)
w_est = numpy.array([domain_p[w_h.index(max(w_h))] for w_h in w_hats])


while min([G.degree(task) for task in tasks]) > 3:
    remove_node_index = numpy.argmin(w_est)
    G.remove_node(workers[remove_node_index])
    w_est[remove_node_index] = float("inf")


for i in range(len(tasks)):
    task_i = tasks[i]
    adj_worker_nodes = [out_edge['w_id'] for out_edge in G[task_i].values()]
    while len(adj_worker_nodes) > 2:
        unreliable_worker_index = numpy.argmin([w_est[k] for k in adj_worker_nodes])
        G.remove_edge(task_i, workers[adj_worker_nodes[unreliable_worker_index]])
        removed_worker = adj_worker_nodes.pop(unreliable_worker_index)

init_graph(G)


#sum(abs(numpy.array([G[t][worker]['Aij'] for t in G[worker]]) - numpy.array([t.label for t in G[worker]]))/2)
'''
